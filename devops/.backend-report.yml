include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
   
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
#  - test
  - release
  - deploy

build-backend-report:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend-report
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA

#backend-report-test:
#  stage: test
#  image: python:3.9
#  before_script:
#    - pip install --upgrade pip
#    - pip install -r backend-report/requirements.txt
#    - pip install -U pytest
#  script:
#    - cd backend-report
#    - pytest -v
#    - python3 -m unittest

upload-backend-report-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/backend-report:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/backend-report:latest
    - docker push $CI_REGISTRY_IMAGE/backend-report:latest
    
deploy-backend-latest:
  stage: deploy
  image: vault:1.11.3

  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual

  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
    
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export SPRING_DATA_MONGODB_URI="$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)"
    - export BACKEND_REPORT_VERSION="latest"

    - docker context create sausage-store --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker context use default
    - docker-compose --context sausage-store pull backend-report
    - docker-compose --context sausage-store up -d --remove-orphans backend-report