#include:
#  - project: 'templates/ci'
#    file: 'DockerInDockerTemplate.yml'

#cache:
#  paths:
#    - frontend/dist/frontend


variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   - test
   - build
   - release
   - deploy

sonarqube-frontend-test:
  stage: test
  image:
    name: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${KEY_SONAR}
      -Dsonar.host.url=${URL_SONAR}
      -Dsonar.login=${LOGIN_SONAR}

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST} "/bin/bash -s" < ./devops/deploy_front.sh
#
#before_script:
#  #устанавливаем ssh-agent для удобства аутентификации по ssh
#  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#  - eval $(ssh-agent -s)
#  #сохраняем сгенеренный ранее приватный ключ для раннера
#  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#  - mkdir -p ~/.ssh
#  - chmod 600 ~/.ssh
#  #Добавляем хост
#  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#  - chmod 644 ~/.ssh/known_hosts
#
#deploy:
#  stage: deploy
#  environment:
#    name: review/$CI_COMMIT_REF_SLUG
#    url: http://51.250.67.45
#    on_stop: stop_review
#  rules:
#    - if: $CI_MERGE_REQUEST_ID
#    #on_stop: deploy
#  rules:
#    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#      when: never
#    - if: $CI_COMMIT_BRANCH
#  
#  script:
#  #- ssh ${DEV_USER}@${DEV_HOST}
#
#  # прописать креды от Nexus в переменные в настройке пайплайна
#  - scp ./devops/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
#  - scp -v ./devops/deploy_front.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/deploy_front.sh
#  - ssh ${DEV_USER}@${DEV_HOST} "chmod +x /home/${DEV_USER}/deploy_front.sh"
#  #- curl -u ${NEXUS_REPO_USER}:${NEXUS_REPO_PASS} -o sausage-store-${VERSION}.jar ${NEXUS_REPO_URL}sausage-store-ponizovskiy-denis-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
#  - ssh ${DEV_USER}@${DEV_HOST} "export "VERSION=${VERSION}"; export "DEV_USER=${DEV_USER}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash -s  < /home/${DEV_USER}/deploy_front.sh"
#  - ssh ${DEV_USER}@${DEV_HOST} "echo "${VERSION}""
#  # скачиваем ранее собранный артефакт с Nexus. При этом необходимо заранее
#  # запускаем бэкенд
#  #- java -jar sausage-store-${VERSION}.jar & 
#  needs:
#    - release
#
#stop_review:
#  stage: deploy
#  script:
#    - echo "Remove review app"
#  environment:
#    name: review/$CI_COMMIT_REF_SLUG
#    action: stop
#  rules:
#    - if: $CI_MERGE_REQUEST_ID
#      when: manual