include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

cache:
  paths:
    - frontend/dist/frontend


variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
   #- test
   - build
   - release
   - deploy

#sonarqube-frontend-test:
#  stage: test
#  image:
#    name: sonarsource/sonar-scanner-cli:latest
#  script:
#    - cd frontend
#    - >
#      sonar-scanner
#      -Dsonar.qualitygate.wait=true
#      -Dsonar.projectKey=${KEY_SONAR}
#      -Dsonar.host.url=${URL_SONAR}
#      -Dsonar.login=${LOGIN_SONAR}

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest


deploy-frontend:
  stage: deploy
  image: alpine:3.15.0

  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual

  before_script:

    - apk add --no-cache  --repository http://dl-cdn.alpinelinux.org/alpine/edge/main --repository  http://dl-cdn.alpinelinux.org/alpine/edge/community docker

    - apk add openssh-client bash curl 
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - curl -SL https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose

  script:

    - export FRONTEND_VERSION="latest"
    - docker context create sausage-store --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker context use sausage-store
    - docker-compose --context sausage-store pull
    - docker-compose --context sausage-store up -d --remove-orphans loadbalancer
