cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
   - build
   - release
   - notify
   - deploy
   
build:
    stage: build
    script:
      - cd backend
      - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
    artifacts:
      paths:
       - backend/target/sausage-store-${VERSION}.jar
       - ${CI_PROJECT_DIR}/.m2/ # Сохранение зависимостей для SAST 
    rules: # rules и only в данных случаях взаимозаменяемы
      - changes:
        - backend/*
        - backend/**/*
        - backend/**/**/*
        - .gitlab-ci.yml
        - devops/.backend.yml
        - devops/deploy_back.sh
        - devops/sausage-store-backend.service

#spotbugs-sast:
#  stage: test
# include:
#   - template: "Security/SAST.gitlab-ci.yml"
# dependencies:
#   - build
#  variables:
#    COMPILE: "false"
#    SAST_JAVA_VERSION: 16
#    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository # не забудьте при сборке также указывать эту папку через аргумент -Dmaven.repo.local
#  artifacts:
#    reports:
#      sast: gl-sast-report.json
# needs:
#   - build

#sonarqube-backend-test:
#  stage: test
#  dependencies:
#    - build
#  image:
#    name: maven:3.8-openjdk-16
#  script:
#    - cd backend
#    - >
#      mvn verify sonar:sonar
#      -Dsonar.qualitygate.wait=true
#      -Dsonar.projectName=${KEY_BACK_SONAR}
#     -Dsonar.projectKey=${KEY_BACK_SONAR}
#      -Dsonar.host.url=${URL_SONAR}
#      -Dsonar.login=${LOGIN_BACK_SONAR}
#  needs:
#    - build

release:
   stage: release
   script:
      - cd backend
      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml || true
#   rules:
#      - changes:
#           - backend/*
#           - .gitlab-ci.yml
#           - devops/.backend.yml
#           - devops/deploy_back.sh
#           - devops/sausage-store-backend.service


#build-backend-code-job:
#    stage: build
#    only:
#     changes:
#     - backend/**/*
#      - .gitlab-ci.yml
#      - devops/.*.yml
#    script:
#      - cd backend
#      - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION}
#   artifacts:
#    paths:
#     - backend/target/sausage-store-${VERSION}.jar
#     - ${CI_PROJECT_DIR}/.m2/ # Сохранение зависимостей для SAST 

#upload-backend-release:
# stage: release
# only:
#    changes:
#     - backend/**/*
#     - .gitlab-ci.yml
#     - devops/.*.yml
# needs:
#   - build-backend-code-job
# script:
#   - cd backend
#   - mvn -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -s settings.xml -Dversion.application=${VERSION} -DskipTests deploy

notification-backend:
  stage: notify
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /send version/
  variables:
    DATA: '{"message":"Вышла новая версия Backend сосисочной — ${VERSION}. Скачать Backend можно по ссылке — ${NEXUS_REPO_URL}sausage-store-ponizovskiy-denis-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar"}'
    CONTENT_TYPE: 'Content-type: application/json'
    PACHKA_WEBHOOK: 'https://api.pachca.com/webhooks/01GKW5NQ2PPC9V9CGACZ6SE94Z'
  script:
    - printenv
    - 'curl -X POST -H "$CONTENT_TYPE" --data "$DATA" "$PACHKA_WEBHOOK"'
  needs:
    - release


#slack-notification-backend:
#  stage: notify
#  only:
#   variables:
#   - $CI_COMMIT_MESSAGE =~ /send notification/
# script:
#   - curl -X POST -H "Content-type:/ application/json" --data '{"text":"Денис Понизовский собрал back при помощи Gitlab CI. <https://gitlab.praktikum-services.ru/api/v4/projects/1143/jobs/artifacts/release-0.0.1/download?job=build-backend-code-job&private_token=346sb6Y4ocmMyc2i-sNN|Скачать артефакты>"}' https://hooks.slack.com/services/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 
# needs:
#   - build-backend-code-job

before_script:
  #устанавливаем ssh-agent для удобства аутентификации по ssh
  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  #сохраняем сгенеренный ранее приватный ключ для раннера
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh
  - chmod 600 ~/.ssh
  #Добавляем хост
  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts


deploy:
  stage: deploy
  environment:
    name: staging
    #url: http://51.250.67.45
    #on_stop: deploy
  script:
  #- ssh ${DEV_USER}@${DEV_HOST}

  # прописать креды от Nexus в переменные в настройке пайплайна
  - scp -v ./devops/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
  - scp -v ./devops/deploy_back.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/deploy_back.sh
  - ssh ${DEV_USER}@${DEV_HOST} "chmod +x /home/${DEV_USER}/deploy_back.sh"
  #- curl -u ${NEXUS_REPO_USER}:${NEXUS_REPO_PASS} -o sausage-store-${VERSION}.jar ${NEXUS_REPO_URL}sausage-store-ponizovskiy-denis-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar
  
  - ssh ${DEV_USER}@${DEV_HOST} "export "PSQL_HOST=${PSQL_HOST}"; export "PSQL_BASE=${PSQL_BASE}"; export "PSQL_USER=${PSQL_USER}"; export "PSQL_PORT=${PSQL_PORT}"; export "PSQL_PASS=${PSQL_PASS}""
  - ssh ${DEV_USER}@${DEV_HOST} "echo -en ""PSQL_HOST="$PSQL_HOST\n"PSQL_PASS="$PSQL_PASS\n"PSQL_PORT="$PSQL_PORT\n"PSQL_BASE="$PSQL_BASE\n"PSQL_USER="$PSQL_USER" > /home/${DEV_USER}/sausage-store-backend.env"
  - ssh ${DEV_USER}@${DEV_HOST} "export "VERSION=${VERSION}"; export "DEV_USER=${DEV_USER}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash < /home/${DEV_USER}/deploy_back.sh"
  - ssh ${DEV_USER}@${DEV_HOST} "echo "${VERSION}""
  - echo ${PSQL_HOST}
  - ssh ${DEV_USER}@${DEV_HOST} "echo "${PSQL_HOST}""
  # скачиваем ранее собранный артефакт с Nexus. При этом необходимо заранее
  # запускаем бэкенд
  #- java -jar sausage-store-${VERSION}.jar & 
  needs:
    - release