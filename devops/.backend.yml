#cache:
#  paths:
#    - ${CI_PROJECT_DIR}/.m2/repository
#
#variables:
#   VERSION: 1.0.${CI_PIPELINE_ID}
#   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
#   JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку
#
#stages:
#   - build
#   - release
#   - notify
#   - deploy
#   
#build:
#    stage: build
#    script:
#      - cd backend
#      - mvn package -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH}
#    artifacts:
#      paths:
#       - backend/target/sausage-store-${VERSION}.jar
#       - ${CI_PROJECT_DIR}/.m2/ # Сохранение зависимостей для SAST 
#    rules: # rules и only в данных случаях взаимозаменяемы
#      - changes:
#        - backend/*
#        - backend/**/*
#        - backend/**/**/*
#        - .gitlab-ci.yml
#        - devops/.backend.yml
#        - devops/deploy_back.sh
#        - devops/sausage-store-backend.service
#
#release:
#   stage: release
#   script:
#      - cd backend
#      - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -Dmaven.wagon.http.ssl.ignore.validity.dates=true -s settings.xml || true
##   rules:
##      - changes:
##           - backend/*
##           - .gitlab-ci.yml
##           - devops/.backend.yml
##           - devops/deploy_back.sh
##           - devops/sausage-store-backend.service
#
#notification-backend:
#  stage: notify
#  only:
#    variables:
#      - $CI_COMMIT_MESSAGE =~ /send version/
#  variables:
#    DATA: '{"message":"Вышла новая версия Backend сосисочной — ${VERSION}. Скачать Backend можно по ссылке — ${NEXUS_REPO_URL}sausage-store-ponizovskiy-denis-backend/com/yandex/practicum/devops/sausage-store/${VERSION}/sausage-store-${VERSION}.jar"}'
#    CONTENT_TYPE: 'Content-type: application/json'
#    PACHKA_WEBHOOK: 'https://api.pachca.com/webhooks/01GKW5NQ2PPC9V9CGACZ6SE94Z'
#  script:
#    - printenv
#    - 'curl -X POST -H "$CONTENT_TYPE" --data "$DATA" "$PACHKA_WEBHOOK"'
#  needs:
#    - release
#
#before_script:
#  #устанавливаем ssh-agent для удобства аутентификации по ssh
#  - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#  - eval $(ssh-agent -s)
#  #сохраняем сгенеренный ранее приватный ключ для раннера
#  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#  - mkdir -p ~/.ssh
#  - chmod 600 ~/.ssh
#  #Добавляем хост
#  - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#  - chmod 644 ~/.ssh/known_hosts
#
#  #Скачиваем и устанавливаем сертификат YANDEX
#  #- wget "https://storage.yandexcloud.net/cloud-certs/CA.pem" -O ~/YandexInternalRootCA.crt
#  #- keytool -importcert -file ~/YandexInternalRootCA.crt -alias yandex -cacerts -storepass changeit -noprompt
#
#
#deploy:
#  stage: deploy
#  environment:
#    name: staging
#    #url: http://51.250.67.45
#    #on_stop: deploy
#  script:
#  #- ssh ${DEV_USER}@${DEV_HOST}
#
#  # прописать креды от Nexus в переменные в настройке пайплайна
#  - scp -v ./devops/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
#  - scp -v ./devops/deploy_back.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/deploy_back.sh
#  - ssh ${DEV_USER}@${DEV_HOST} "chmod +x /home/${DEV_USER}/deploy_back.sh"
#  - scp -v ./devops/sausage-store-backend.env.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.env.sh
#  - ssh ${DEV_USER}@${DEV_HOST} "chmod +x /home/${DEV_USER}/sausage-store-backend.env.sh"
#   
#  - ssh ${DEV_USER}@${DEV_HOST} "export "PSQL_HOST=${PSQL_HOST}"; export "PSQL_BASE=${PSQL_BASE}"; export "PSQL_USER=${PSQL_USER}"; export "PSQL_PORT=${PSQL_PORT}"; export "PSQL_PASS=${PSQL_PASS}"; export "MONGO_HOST=${MONGO_HOST}"; export "MONGO_BASE=${MONGO_BASE}"; export "MONGO_USER=${MONGO_USER}"; export "MONGO_PORT=${MONGO_PORT}"; export "MONGO_PASS=${MONGO_PASS}"; export "DEV_USER=${DEV_USER}";setsid /bin/bash < /home/${DEV_USER}/sausage-store-backend.env.sh"
#  - ssh ${DEV_USER}@${DEV_HOST} "export "VERSION=${VERSION}"; export "DEV_USER=${DEV_USER}"; export "DEV_HOST=${DEV_HOST}";export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";export "NEXUS_REPO_USER=${NEXUS_REPO_USER}"; export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";setsid /bin/bash < /home/${DEV_USER}/deploy_back.sh"
#
#  # скачиваем ранее собранный артефакт с Nexus. При этом необходимо заранее
#  # запускаем бэкенд
#  #- java -jar sausage-store-${VERSION}.jar & 
#
#  needs:
#    - release


# В нашем Gitlab для сборки контейнеров воспользуемся Докером в Докере :)  
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-kubernetes-executor-with-docker-in-docker
# Для сборки образов с использованием Docker-in-Docker:
# добавить в код Downstream пайплайнов в секцию include подготовленный шаблон, содержащий необходимые настройки:
#  https://gitlab.praktikum-services.ru/templates/ci/-/blob/main/DockerInDockerTemplate.yml
# использовать в задачах сборки в качестве образа стабильную версию образа Docker:dind docker:20.10.12-dind-rootless
#

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
  - template: Jobs/Container-Scanning.gitlab-ci.yml
    
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  - test
  - release
  - deploy

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA

sonarqube-backend-test:
  stage: test
  image:
    name: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
      mvn verify sonar:sonar
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=${KEY_BACK_SONAR}
      -Dsonar.projectKey=${KEY_BACK_SONAR}
      -Dsonar.host.url=${URL_SONAR}
      -Dsonar.login=${LOGIN_BACK_SONAR}

#container-scaning:
#  #include:   
#  #  - template: Jobs/Container-Scanning.gitlab-ci.yml
#  stage: test
#  container_scanning:
#    variables:
#      COMPILE: "false"
#      SAST_JAVA_VERSION: 16
#      CS_DEFAULT_BRANCH_IMAGE: $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
#  artifacts:
#    reports:
#      sast: gl-sast-report.json

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest
    
deploy-backend:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "SPRING_DATASOURCE_URL=jdbc:postgresql://${PSQL_HOST}:${PSQL_PORT}/${PSQL_BASE}";
       export "SPRING_DATASOURCE_USERNAME=${PSQL_USER}";
       export "SPRING_DATASOURCE_PASSWORD=${PSQL_PASS}";
       export "SPRING_DATA_MONGODB_URI=mongodb://${MONGO_USER}:${MONGO_PASS}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_BASE}?tls=true";
       export "REGITRY_USER=${CI_REGISTRY_USER}";
       export "REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "REGISTRY=${CI_REGISTRY}";
      /bin/bash -s" < ./devops/deploy_back.sh
