# В нашем Gitlab для сборки контейнеров воспользуемся Докером в Докере :)  
# https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-the-kubernetes-executor-with-docker-in-docker
# Для сборки образов с использованием Docker-in-Docker:
# добавить в код Downstream пайплайнов в секцию include подготовленный шаблон, содержащий необходимые настройки:
#  https://gitlab.praktikum-services.ru/templates/ci/-/blob/main/DockerInDockerTemplate.yml
# использовать в задачах сборки в качестве образа стабильную версию образа Docker:dind docker:20.10.12-dind-rootless
#

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

    
variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  #- test
  - release
  - deploy

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA

#sonarqube-backend-test:
#  stage: test
#  image:
#    name: maven:3.8-openjdk-16
#  script:
#    - SPRING_CLOUD_VAULT_ENABLED=false
#    - cd backend
#    - >
#      mvn verify sonar:sonar
#      -Dsonar.qualitygate.wait=true
#      -Dsonar.projectName=${KEY_BACK_SONAR}
#      -Dsonar.projectKey=${KEY_BACK_SONAR}
#      -Dsonar.host.url=${URL_SONAR}
#      -Dsonar.login=${LOGIN_BACK_SONAR}

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-backend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-backend:latest
    
deploy-backend:
  stage: deploy
  image: vault:1.11.3

  # если хотим сделать деплой по кнопке
  #rules:
  #  - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  #    when: manual
  #  - if: '$CI_COMMIT_BRANCH == "master"'
  #    when: manual

  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

  script:
    
    - export BACKEND_VERSION="latest"
    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - export SPRING_DATASOURCE_URL="jdbc:postgresql://${PSQL_HOST}:${PSQL_PORT}/${PSQL_BASE}"
    - echo ${SPRING_DATASOURCE_URL}
    - export SPRING_DATASOURCE_USERNAME="$(vault kv get -field=spring.datasource.username secret/sausage-store)"
    - echo ${SPRING_DATASOURCE_USERNAME}
    - export SPRING_DATASOURCE_PASSWORD="$(vault kv get -field=spring.datasource.password secret/sausage-store)"
    - echo ${SPRING_DATASOURCE_PASSWORD}
    
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context create sausage-store --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
    - docker context use default
    - docker-compose --context sausage-store pull back_blue
    - if docker-compose --context sausage-store ps back_blue | grep -q healthy; then
      docker-compose --context sausage-store up -d --wait back_green --remove-orphans && docker-compose --context sausage-store stop back_blue; else
      docker-compose --context sausage-store up -d --wait back_blue --remove-orphans && docker-compose --context sausage-store stop back_green; fi